---
description: 
globs: 
alwaysApply: true
---
# Rosa Workspace Rules

## Architecture & Technology Stack
- The project is a monorepo managed using Nx. All applications and libraries are organized using Nx conventions.
- Use feature-driven architecture in both frontend and backend. Group code by domain/feature, not by file type.
- Ensure end-to-end type safety where possible (use DTOs with TypeORM and interfaces shared with Angular via a shared Nx library).

## Backend (NestJS)
- Follow NestJS best practices for modular architecture, dependency injection, and controller/service patterns.
- Use TypeORM for database interaction. Follow best practices for entity declaration, migrations, and repository-based querying.
- The database is PostgreSQL. All schema definitions, migrations, and queries should be optimized for PostgreSQL syntax and features.
- For APIs, prefer RESTful design but allow GraphQL if noted explicitly. Always validate and transform incoming requests using class-validator and class-transformer in DTOs.
- Use environment-specific configuration using Nx's environment support (e.g., process.env, .env, and @nestjs/config).

## Frontend (Angular 19)
- Always use the new Angular control flow syntax (@if, @for, @switch, @empty) instead of legacy structural directives (*ngIf, *ngFor, *ngSwitch). Always include track expressions in @for loops using unique identifiers for performance.
- Use standalone components by default, latest Angular APIs, and prefer Angular Signals over legacy patterns (@Input()/@Output()).
- Use Angular Signals for state management and reactivity wherever possible.
- Use OnPush change detection strategy in Angular components for better performance.
- Implement lazy loading for feature modules and routes.
- Use NG-ZORRO as the primary UI component library. Ensure compatibility with Angular 19 and follow NG-ZORRO's theming and component APIs.
- Use modern Angular libraries like @angular/cdk, @angular/animations, and integrate with Tailwind CSS if styling is needed.

## State Management
- NgRx is used with the latest syntax supporting Signals-based stores. Avoid deprecated createReducer/createEffect APIs in favor of signal-centric usage.

## Code Quality & Standards
- Code must be typed. Avoid using any or implicit any types in TypeScript.
- Use consistent naming conventions across the stack. Prefer kebab-case for file names, camelCase for variables, and PascalCase for classes.
- Use ESLint with Angular and NestJS recommended rules.
- Apply Prettier for consistent code formatting.
- Use Husky for pre-commit hooks to enforce code quality.
- Follow conventional commit message format for better git history.

## Testing
- Use Jest for unit testing and Cypress for e2e testing in Nx workspace.
- Maintain minimum 80% code coverage for business logic.
- Use Angular Testing Library patterns for component testing.
- Mock external dependencies and use dependency injection for testability.

## Error Handling & Logging
- Use NestJS built-in exception filters and custom exception classes.
- Implement structured logging with appropriate log levels (error, warn, info, debug).
- Use Angular ErrorHandler for global frontend error handling.
- Never expose sensitive information in error messages to clients.

## Security
- Validate all inputs using class-validator and sanitize user data.
- Use proper authentication guards and role-based access control.
- Implement CORS policies and security headers.
- Never commit secrets or API keys to version control.

## Performance
- Optimize database queries with proper indexing and query analysis.
- Use Angular's built-in caching mechanisms and HTTP interceptors.
- Implement proper lazy loading strategies.

## Accessibility
- Follow WCAG 2.1 AA guidelines for web accessibility.
- Use semantic HTML and proper ARIA attributes.
- Test with screen readers and keyboard navigation.
- Ensure sufficient color contrast ratios.

## Development Practices
- Suggest clean, readable, minimal code.
- Default to safe practices (try/catch, input validation, file checking).
- Prefer standard libraries over third-party ones unless necessary.
- When debugging, suggest adding small debug print statements.
- Code must be understandable by a junior developer reading it.
